import fnmatch
import os
import posixpath
import re

IGNORED_DIRS = [
    '*.egg-info',
    '.bzr',
    '.cache',
    '.git',
    '.hg',
    '.idea',
    '.svn',
    '.tox',
    '__pycache__',
    '_build',
    'bower_components',
    'CVS',
    'htmlcov',
    'node_modules',
    'venv*',
]

IGNORED_PATH_REGEXPS = [
    '^.*shoop/admin/static/shoop_admin.*',  # autogenerated
    '^.*shoop/xtheme/static/*',  # autogenerated
    '^build/',  # built files
]

IGNORED_PATTERNS = [
    '*-bundle.js',
    '*.bat',
    '*.bz2',
    '*.dat',
    '*.doctree',
    '*.eot',
    '*.gif',
    '*.gz',
    '*.ico',
    '*.inv',
    '*.jpg',
    '*.map',  # source map
    '*.min.js',
    '*.mo',
    '*.otf',
    '*.pickle',
    '*.png',
    '*.pyc',
    '*.sqlite3',
    '*.svg',
    '*.ttf',
    '*.woff',
    '*.woff2',
    '*.zip',
    '.coverage',
    '_version.py',
    'Makefile',
    'vendor.js',
]


def find_files(
        root, generated_resources=None,
        ignored_patterns=IGNORED_PATTERNS,
        ignored_dirs=IGNORED_DIRS,
        ignored_path_regexps=IGNORED_PATH_REGEXPS,
        allowed_extensions=None
    ):
    """
    Find files in `root` with ignores, `generated_resources` handling etc.

    :param root: Root directory
    :type root: str
    :param generated_resources: Output set of generated resources (mutated during find_files)
    :type generated_resources: set
    :param ignored_patterns: fnmatch file patterns to ignore
    :type ignored_patterns: Iterable[str]
    :param ignored_dirs: fnmatch directory patterns to ignore
    :type ignored_dirs: Iterable[str]
    :param ignored_path_regexps: Path regexps to ignore
    :type ignored_path_regexps: Iterable[str]
    :param allowed_extensions: Extensions (really filename suffixes) to ignore (optional)
    :type allowed_extensions: Iterable[str]|None
    :return: Iterable of file paths
    :rtype: Iterable[str]
    """
    if generated_resources is None:
        generated_resources = set()
    for (path, dirs, files) in os.walk(root):
        path = posixpath.normpath(path.replace(os.sep, "/"))
        remove_ignored_directories(path, dirs, ignored_dirs, ignored_path_regexps)
        for filename in files:
            filepath = posixpath.join(path, filename)
            if filename == "generated_resources.txt":
                with open(filepath, "r") as generated_resources_manifest:
                    for line in generated_resources_manifest:
                        line = line.strip()
                        if line:
                            generated_resources.add(posixpath.join(path, line))
                continue
            if not all(not fnmatch.fnmatch(filename, x) for x in ignored_patterns):
                continue
            if allowed_extensions is not None and not any(filepath.endswith(extension) for extension in allowed_extensions):
                continue
            yield filepath


def remove_ignored_directories(path, dirs, ignored_dirs, ignored_path_regexps):
    matches = set()
    for ignored_dir in ignored_dirs:
        matches.update(set(dir for dir in dirs if fnmatch.fnmatch(dir, ignored_dir)))

    for ignore_re in ignored_path_regexps:
        matches.update(dir for dir in dirs if re.match(ignore_re, posixpath.join(path, dir)))

    for ignored_dir in matches:
        dirs.remove(ignored_dir)
